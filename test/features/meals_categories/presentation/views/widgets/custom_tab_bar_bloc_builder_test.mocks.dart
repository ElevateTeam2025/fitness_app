// Mocks generated by Mockito 5.4.5 from annotations
// in fitness_app/test/features/meals_categories/presentation/views/widgets/custom_tab_bar_bloc_builder_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:fitness_app/features/meals_categories/domain/entities/meals_by_category_entity.dart'
    as _i9;
import 'package:fitness_app/features/meals_categories/domain/entities/meals_categories_entity.dart'
    as _i3;
import 'package:fitness_app/features/meals_categories/presentation/cubits/get_meals_by_category_cubit/get_meals_by_category_cubit.dart'
    as _i8;
import 'package:fitness_app/features/meals_categories/presentation/cubits/get_meals_by_category_cubit/get_meals_by_category_states.dart'
    as _i10;
import 'package:fitness_app/features/meals_categories/presentation/cubits/get_meals_categories_cubit/get_meals_categories_cubit.dart'
    as _i2;
import 'package:fitness_app/features/meals_categories/presentation/cubits/get_meals_categories_cubit/get_meals_categories_states.dart'
    as _i4;
import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetMealsCategoriesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMealsCategoriesCubit extends _i1.Mock
    implements _i2.GetMealsCategoriesCubit {
  MockGetMealsCategoriesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoaded => (super.noSuchMethod(
        Invocation.getter(#isLoaded),
        returnValue: false,
      ) as bool);

  @override
  set isLoaded(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isLoaded,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.MealsCategoriesEntity> get categories => (super.noSuchMethod(
        Invocation.getter(#categories),
        returnValue: <_i3.MealsCategoriesEntity>[],
      ) as List<_i3.MealsCategoriesEntity>);

  @override
  set categories(List<_i3.MealsCategoriesEntity>? newCategories) =>
      super.noSuchMethod(
        Invocation.setter(
          #categories,
          newCategories,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get selectedIndex => (super.noSuchMethod(
        Invocation.getter(#selectedIndex),
        returnValue: 0,
      ) as int);

  @override
  set selectedIndex(int? index) => super.noSuchMethod(
        Invocation.setter(
          #selectedIndex,
          index,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.GetMealsCategoriesStates get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i5.dummyValue<_i4.GetMealsCategoriesStates>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.GetMealsCategoriesStates);

  @override
  _i6.Stream<_i4.GetMealsCategoriesStates> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i4.GetMealsCategoriesStates>.empty(),
      ) as _i6.Stream<_i4.GetMealsCategoriesStates>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> doIntents(_i2.GetMealsCategoriesIntent? intent) =>
      (super.noSuchMethod(
        Invocation.method(
          #doIntents,
          [intent],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void emit(_i4.GetMealsCategoriesStates? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i7.Change<_i4.GetMealsCategoriesStates>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [GetMealsByCategoryCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMealsByCategoryCubit extends _i1.Mock
    implements _i8.GetMealsByCategoryCubit {
  MockGetMealsByCategoryCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i9.MealsByCategoryEntity> get mealsByCategoryEntity =>
      (super.noSuchMethod(
        Invocation.getter(#mealsByCategoryEntity),
        returnValue: <_i9.MealsByCategoryEntity>[],
      ) as List<_i9.MealsByCategoryEntity>);

  @override
  set mealsByCategoryEntity(
          List<_i9.MealsByCategoryEntity>? _mealsByCategoryEntity) =>
      super.noSuchMethod(
        Invocation.setter(
          #mealsByCategoryEntity,
          _mealsByCategoryEntity,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.GetMealsByCategoryStates get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i5.dummyValue<_i10.GetMealsByCategoryStates>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i10.GetMealsByCategoryStates);

  @override
  _i6.Stream<_i10.GetMealsByCategoryStates> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i10.GetMealsByCategoryStates>.empty(),
      ) as _i6.Stream<_i10.GetMealsByCategoryStates>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  dynamic doIntents(
    _i8.GetMealByCategoryIntent? intent, {
    required String? category,
  }) =>
      super.noSuchMethod(Invocation.method(
        #doIntents,
        [intent],
        {#category: category},
      ));

  @override
  void emit(_i10.GetMealsByCategoryStates? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i7.Change<_i10.GetMealsByCategoryStates>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
