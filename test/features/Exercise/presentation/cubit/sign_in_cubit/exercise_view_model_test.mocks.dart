// Mocks generated by Mockito 5.4.6 from annotations
// in fitness_app/test/features/Exercise/presentation/cubit/sign_in_cubit/exercise_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:fitness_app/core/common/result.dart' as _i4;
import 'package:fitness_app/features/Exercise/domain/entity/difficulty_level_entity.dart'
    as _i7;
import 'package:fitness_app/features/Exercise/domain/entity/exercise_response_entity.dart'
    as _i5;
import 'package:fitness_app/features/Exercise/domain/use_case/exercise_use_case.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ExercisesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockExercisesUseCase extends _i1.Mock implements _i2.ExercisesUseCase {
  MockExercisesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i5.ExerciseResponseEntity>> call(
    String? muscleId,
    String? difficultyId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [muscleId, difficultyId]),
            returnValue:
                _i3.Future<_i4.Result<_i5.ExerciseResponseEntity>>.value(
                  _i6.dummyValue<_i4.Result<_i5.ExerciseResponseEntity>>(
                    this,
                    Invocation.method(#call, [muscleId, difficultyId]),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<_i5.ExerciseResponseEntity>>);

  @override
  _i3.Future<_i4.Result<List<_i7.DifficultyLevelEntity>>> getLevels() =>
      (super.noSuchMethod(
            Invocation.method(#getLevels, []),
            returnValue:
                _i3.Future<_i4.Result<List<_i7.DifficultyLevelEntity>>>.value(
                  _i6.dummyValue<_i4.Result<List<_i7.DifficultyLevelEntity>>>(
                    this,
                    Invocation.method(#getLevels, []),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<List<_i7.DifficultyLevelEntity>>>);
}
