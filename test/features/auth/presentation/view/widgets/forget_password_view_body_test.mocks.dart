// Mocks generated by Mockito 5.4.6 from annotations
// in fitness_app/test/features/auth/presentation/view/widgets/forget_password_view_body_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:fitness_app/features/auth/forget_password/data/models/forget_password_request.dart'
    as _i3;
import 'package:fitness_app/features/auth/forget_password/presentation/cubits/forget_password_cubit/forget_password_cubit.dart'
    as _i4;
import 'package:fitness_app/features/auth/forget_password/presentation/cubits/forget_password_cubit/forget_password_states.dart'
    as _i5;
import 'package:flutter/cupertino.dart' as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextEditingController_0 extends _i1.SmartFake
    implements _i2.TextEditingController {
  _FakeTextEditingController_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGlobalKey_1<T extends _i2.State<_i2.StatefulWidget>>
    extends _i1.SmartFake
    implements _i2.GlobalKey<T> {
  _FakeGlobalKey_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeForgotPasswordRequest_2 extends _i1.SmartFake
    implements _i3.ForgotPasswordRequest {
  _FakeForgotPasswordRequest_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ForgetPasswordCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockForgetPasswordCubit extends _i1.Mock
    implements _i4.ForgetPasswordCubit {
  @override
  _i2.TextEditingController get emailController =>
      (super.noSuchMethod(
            Invocation.getter(#emailController),
            returnValue: _FakeTextEditingController_0(
              this,
              Invocation.getter(#emailController),
            ),
            returnValueForMissingStub: _FakeTextEditingController_0(
              this,
              Invocation.getter(#emailController),
            ),
          )
          as _i2.TextEditingController);

  @override
  _i2.GlobalKey<_i2.FormState> get formKey =>
      (super.noSuchMethod(
            Invocation.getter(#formKey),
            returnValue: _FakeGlobalKey_1<_i2.FormState>(
              this,
              Invocation.getter(#formKey),
            ),
            returnValueForMissingStub: _FakeGlobalKey_1<_i2.FormState>(
              this,
              Invocation.getter(#formKey),
            ),
          )
          as _i2.GlobalKey<_i2.FormState>);

  @override
  _i3.ForgotPasswordRequest get request =>
      (super.noSuchMethod(
            Invocation.getter(#request),
            returnValue: _FakeForgotPasswordRequest_2(
              this,
              Invocation.getter(#request),
            ),
            returnValueForMissingStub: _FakeForgotPasswordRequest_2(
              this,
              Invocation.getter(#request),
            ),
          )
          as _i3.ForgotPasswordRequest);

  @override
  _i2.AutovalidateMode get autovalidateMode =>
      (super.noSuchMethod(
            Invocation.getter(#autovalidateMode),
            returnValue: _i2.AutovalidateMode.disabled,
            returnValueForMissingStub: _i2.AutovalidateMode.disabled,
          )
          as _i2.AutovalidateMode);

  @override
  set autovalidateMode(_i2.AutovalidateMode? value) => super.noSuchMethod(
    Invocation.setter(#autovalidateMode, value),
    returnValueForMissingStub: null,
  );

  @override
  _i5.ForgetPasswordStates get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i6.dummyValue<_i5.ForgetPasswordStates>(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _i6.dummyValue<_i5.ForgetPasswordStates>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i5.ForgetPasswordStates);

  @override
  _i7.Stream<_i5.ForgetPasswordStates> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i7.Stream<_i5.ForgetPasswordStates>.empty(),
            returnValueForMissingStub:
                _i7.Stream<_i5.ForgetPasswordStates>.empty(),
          )
          as _i7.Stream<_i5.ForgetPasswordStates>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void doIntent(_i4.ForgetPasswordIntent? intent) => super.noSuchMethod(
    Invocation.method(#doIntent, [intent]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i5.ForgetPasswordStates? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i8.Change<_i5.ForgetPasswordStates>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}
